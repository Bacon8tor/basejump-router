application:
  title: Sample Application
  author: Ryan Paul
  version: 0.0.1
settings:
  authentication:
    jwt:
      secret: "secret goes here"
  database:
    host: rethinkdb-stable
  static:
    path: public
graphql:
  - id: bookmark
    schema: >
      type Bookmark {
        title: String
        url: String
      }

      type Entry {
        id: String!
        shared: Boolean,
        user: String!
        bookmark: Bookmark
      }

      type Query {
        entry(id: String!): Entry
        entries: [Entry]
      }
    resolvers:
      - id: entry
        action: >
          r.db("basedemo").table("bookmarks").get(params.id).run()
      - id: entries
        action: >
          r.db("basedemo").table("bookmarks").run()
route:
  - path: /graphql
    method: post
    settings:
      parameters:
        - in: body
          name: body
      graphql: bookmark
  - path: /sample
    method: get
    settings:
      action: >
        ({a: 1, b: 2, c: 3})
  - path: /realtime
    method: get
    settings:
      action: >
        r.db("rethinkdb").table("stats").changes()
  - path: /realtime/alternate
    method: get
    settings:
      action: >
        r.db('rethinkdb').table('stats').changes().then(cursor => {
          var stream = new EventEmitter();
          stream.on("close", () => cursor.close());
          cursor.each((err, change) => stream.emit('update', change));
          return stream;
        });
  - path: /test
    method: get
    settings:
      access:
        require: user
      action: r.expr([1,2,3, user])
  - path: /test
    method: post
    settings:
      parameters:
        - in: body
          name: test
          schema:
            $ref: test
      action: r.expr([1,2,3]).map(r.row.mul(2))
  - path: /test/fellowship
    method: get
    settings:
      action: "r.db('test').table('fellowship')"
  - path: /test/fellowship
    method: post
    settings:
      parameters:
        - in: body
          name: member
          schema:
            $ref: fellowshipMember
      action: "r.db('test').table('fellowship').insert(params.member)"
  - path: /test/fellowship/:species
    method: get
    settings:
      parameters:
        - in: path
          name: species
          required: true
          type: string
      action: >
        r.db("test").table("fellowship").filter({species: params.species})
  - path: /test/:n
    method: get
    settings:
      parameters:
        - in: path
          name: n
          type: string
      action: r.expr(params.n)
  - path: /messages
    method: get
    settings:
      parameters:
        - name: limit
          in: query
          type: number
          default: 10
      action: >
        r.db("chat").table("messages").orderBy(r.desc("time")).limit(params.limit)
schema:
  - id: fellowshipMember
    type: object
    properties:
      name: {type: string}
      species: {type: string}
    required: ["name", "species"]
    additionalProperties: false
  - id: test
    type: object
    properties:
      qwerty: {type: string}
    additionalProperties: false
blueprint:
  - name: default
    routes:
      - path: /
        method: get
        settings:
          action: r.table(collection)
      - path: /
        method: post
        settings:
          parameters:
            - in: body
              name: member
              schema: "@"
          action: r.table(collection).insert(params.member)
      - path: /:id
        method: get
        settings:
          parameters:
            - in: path
              name: id
              type: string
          action: r.table(collection).get(params.id)
      - path: /:id
        method: put
        settings:
          parameters:
            - in: path
              name: id
              type: string
            - in: body
              name: body
              schema: "@"
          action: r.table(collection).get(params.id).update(params.body)
      - path: /:id
        method: delete
        settings:
          parameters:
            - in: path
              name: id
              type: string
          action: r.table(collection).get(params.id).delete()
collection:
  - name: fellowship
    path: /api/lotr/fellowship
    blueprint: default
    schema:
      $ref: fellowshipMember
    routes:
      - path: /blah
        method: get
        settings:
          action: r.expr([3, 2, 1]).map(r.row.mul(2))
      - path: /blah
        method: post
        settings:
          parameters:
            - in: body
              name: member
              schema: "@"
          action: r.table(collection).insert(params.member)
